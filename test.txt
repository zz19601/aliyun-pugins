create:
aliyuncli ecs  CreateVpc --VpcName TestVPC1
aliyuncli ecs  CreateVSwitch --ZoneId cn-beijing-a --VpcId vpc-25t09nupb --CidrBlock  172.19.0.0/16
--VSwitchName vs1

   "Vpcs": {
       "Vpc": [
           {
               "Status": "Available",
               "VRouterId": "vrt-25w2hq6f4",
               "Description": "",
               "UserCidrs": {
                   "UserCidr": []
               },
               "RegionId": "cn-beijing",
               "CreationTime": "2016-05-26T06:39:06Z",
               "VSwitchIds": {
                   "VSwitchId": []
               },
               "VpcId": "vpc-25t09nupb",
               "VpcName": "TestVPC1",
               "CidrBlock": "172.16.0.0/12",
               "IsDefault": false
           }
       ]

172.17.0.0/16

query:
aliyuncli ecs  DescribeVpcs
del
aliyuncli ecs  DeleteVpc --VpcId   vpc-25glhpkk2


2016/5/26
todo：
1.需要删除：
"VpcId": "vpc-250mh1c4t",
"VpcId": "vpc-25b4z29y8"
"VpcId": "vpc-256cgyu8g"
"VpcId": "vpc-25o1v8ty0",

日志输出有误导？应该是新创建的资源：
Using external resource: vpc-255wn29u6

todo：出错后资源自动删除？自动回滚机制？

查询时设置分页信息

2.实例支持不设置VPC

wagon插件打包：
# create an archive by retrieving the latest non-prerelease version from PyPI.
wagon create -s flask
# create an archive by retrieving the package from PyPI and keep the downloaded wheels (kept under <cwd>/plugin) and exclude the cloudify-plugins-common and cloudify-rest-client packages from the archive.
wagon create -s cloudify-script-plugin==1.2 --keep-wheels -v --exclude cloudify-plugins-common --exclude cloudify-rest-client
# create an archive by retrieving the source from a URL and creating wheels from requirement files found within the archive. Then, validation of the archive takes place. The created archive will be in zip format.
wagon create -s http://github.com/cloudify-cosmo/cloudify-script-plugin/archive/1.2.tar.gz -r --validate --format zip
# create an archive by retrieving the source from a local path and output the tar.gz file to /tmp/<PACKAGE>.tar.gz (defaults to <cwd>/<PACKAGE>.tar.gz) and provides explicit Python versions supported by the package (which usually defaults to the first two digits of the Python version used to create the archive.)
wagon create -s ~/packages/cloudify-script-plugin/ -o /tmp/ --pyver 33 --pyver 26 --pyver 27
# pass additional args to `pip wheel` (NOTE that conflicting arguments are not handled by wagon.)
wagon create -s http://github.com/cloudify-cosmo/cloudify-script-plugin/archive/1.2.zip -a '--retries 5'

wagon create -s cloudify-aliyun-plugin/ -o wagon/
C:/work/src/cloudify/cloudify-aliyun-plugin/

wagon create -s ~/wagon/cloudify-aliyun-plugin/ -r --keep-wheels
aliyuntest-blueprint.yaml
C:\work\src\cloudify\cloudify-aliyun-plugin